import { Generated, ColumnType, RawBuilder, Kysely } from 'kysely'
import { createKysely } from '@vercel/postgres-kysely'

// interface UserTable {
//   // Columns that are generated by the database should be marked
//   // using the `Generated` type. This way they are automatically
//   // made optional in inserts and updates.
//   id: Generated<number>
//   name: string
//   email: string
//   image: string

//   // You can specify a different type for each operation (select, insert and
//   // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
//   // wrapper. Here we define a column `createdAt` that is selected as
//   // a `Date`, can optionally be provided as a `string` in inserts and
//   // can never be updated:
//   createdAt: ColumnType<Date, string | undefined, never>
// }

// Keys of this interface are table names.
// export interface Database {
//   users: UserTable
// }

interface UserTable {
  id: Generated<number>
  name: string | null
  username: string | null
  gh_username: string | null
  email: string
  emailVerified: ColumnType<Date, string | undefined, never>
  image: string
  createdAt: ColumnType<Date, string | undefined, never>
  updatedAt: ColumnType<Date, string | undefined, never>
}

interface AccountTable {
  id: Generated<number>
  userId: string
  type: string
  provider: string
  providerAccountId: string
  refresh_token: string | null
  refresh_token_expires_in: string | null
  access_token: string | null
  expires_at: number | null
  token_type: string | null
  scope: string | null
  id_token: string | null
  session_state: string | null
  oauth_token_secret: string | null
  oauth_token: string | null
}

interface SessionTable {
  id: Generated<number>
  sessionToken: string
  user_Id: string
  expires: Date
  user: UserTable
}

interface VerificationTokenTable {
  identifier: string
  token: string
  expires: Date
}

interface ProjectTable {
  id: string
  name: string
  slug: string
  logo: string | null
  usage:  number
  usageLimi: number       
  plan: string
  paymentId: string //subscription ID
  billingCycleStart: number | null          // day of the month when the billing cycle starts
  createdAt: ColumnType<Date, string | undefined, never>
  updatedAt: ColumnType<Date, string | undefined, never>
}

interface ProjectInviteTable {
  email: string
  expires: Date
  projectId: string
  createdAt: ColumnType<Date, string | undefined, never>
}

interface ProjectUsersTable {
  id: string
  role: string
  createdAt: Date
  updatedAt: Date
  user_Id: string
  projectId: string
}

enum EmailType {
  firstDomainInvalidEmail,
  secondDomainInvalidEmail,
  firstUsageLimitEmail,
  secondUsageLimitEmail
}

interface SentEmailTable {
  id: string
  type: EmailType
  createdAt: Date 
  userId:   string | null
  projectId: string | null
}

interface DomainTable {
  id: string
  slug: string
  verified: boolean
  target: string | null
  type: string
  description: string | null
  projectId: string | null
  primary: boolean
  lastChecked: Date
  createdAt: Date
  updatedAt: Date
}

interface LinkTable {
  id: string
  domain: string // domain of the link (e.g. dub.sh) – also stored on Redis
  key: string // key of the link (e.g. /github) – also stored on Redis
  url: string  // target url (e.g. https://github.com/steven-tey/dub) – also stored on Redis
  archived: boolean   // whether the link is archived or not (TODO: REMOVE AFTER ADDING TAGS)
  expiresAt: Date // when the link expires – stored on Redis via ttl
  password: string | null // password to access the link – also stored on Redis

  proxy: boolean  // Proxy to use custom OG tags (stored on redis) – if false, will use OG tags from target url
  title: string | null // OG title for the link (e.g. Dub - Open-Source Bitly Alternative)
  description: string | null // OG description for the link (e.g. An open-source link management tool for modern marketing teams to create, share, and track short links.)
  image: string | null // OG image for the link (e.g. https://dub.sh/og-image.png)

  // UTM parameters
  utm_source: string | null // UTM source for the link (e.g. youtube.com)
  utm_medium:   string | null // UTM medium for the link (e.g. social)
  utm_campaign: string | null // UTM campaign for the link (e.g. summer-sale)
  utm_term:     string | null // UTM term for the link (e.g. dub)
  utm_content:  string | null // UTM content for the link (e.g. description)

  // Custom device targeting
  ios: string | null // custom link for iOS devices
  android: string | null // custom link for Android devices
  userId: string

  // Project that the link belongs to
  projectId: string | null

  // Link metadata
  clicks: ColumnType< 0 | number>       // number of clicks
  publicStats: boolean // whether to show public stats or not
  createdAt: Date
  updatedAt: Date

  // Link tags
  tagId: string | null

  // TODO: might wanna add indices for utm_source, utm_medium, utm_campaign
}

interface TagTable {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  projectId: string
}



// Keys of this interface are table names.
export interface Database {
  Users: UserTable
  Account: AccountTable
  Session: SessionTable
  VerificationToken: VerificationTokenTable,
  Project: ProjectTable,
  ProjectInvite: ProjectInviteTable
  Projectuser: ProjectUsersTable,
  SendEmail: SentEmailTable
  Link: LinkTable
  Domain: DomainTable
  Tag: TagTable

}



export const db = createKysely<Database>()
export { sql } from 'kysely'
