import { Generated, ColumnType } from 'kysely'


type ProviderType = "oidc" | "oauth" | "email" | "credentials";


export interface UserTable {
    // Columns that are generated by the database should be marked
    // using the `Generated` type. This way they are automatically
    // made optional in inserts and updates.
    id: Generated<number>
    name: string
    email: string
    image: string
    // You can specify a different type for each operation (select, insert and
    // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
    // wrapper. Here we define a column `createdAt` that is selected as
    // a `Date`, can optionally be provided as a `string` in inserts and
    // can never be updated:
    createdAt: ColumnType<Date, string | undefined, never>
  }

  export interface AccountTable {
    id: Generated<string>
    userId: string 
    type: ProviderType
    provider: string
    providerAccountId: string
    refresh_token: string | undefined
    access_token: string | undefined
    expires_at: number | undefined
    token_type: string | undefined
    scope: string | undefined
    id_token: string | undefined
    session_state: string | undefined
    // oauth_token_secret: string | null | undefined
    // oauth_token: string | null | undefined
  }
  
  export interface SessionTable {
    id: Generated<string>
    sessionToken: string
    userId: string
    expires: Date
  }
  
  export interface VerificationTokenTable {
    identifier: string
    token: string
    expires: Date
  }